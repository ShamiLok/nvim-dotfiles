local has_telescope, telescope = pcall(require, "telescope")
if not has_telescope then
  return
end

local actions       = require("telescope.actions")
local action_state  = require("telescope.actions.state")
local previewers    = require("telescope.previewers")
local sorters       = require("telescope.sorters")

--- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ <CR>:
--- –±–µ—Ä—ë—Ç entry, –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
local function open_with_position(prompt_bufnr)
  local entry = action_state.get_selected_entry()
  if not entry or not entry.path then
    return
  end
  -- –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ Telescope
  actions.close(prompt_bufnr)
  -- –ï—Å–ª–∏ entry —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'path' –∏ 'line', –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏
  -- entry.value –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "path:line:col:	text..."
  -- –í—ã–∑–æ–≤ select_default —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –º—ã –º–æ–∂–µ–º —è–≤–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å:
  local filename = entry.path
  local lnum = entry.line or entry.lnum or entry.row or nil
  if lnum then
    vim.cmd(string.format("edit +%d %s", lnum, vim.fn.fnameescape(filename)))
  else
    vim.cmd("edit " .. vim.fn.fnameescape(filename))
  end
end

telescope.setup{
  defaults = {
    -- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è live_grep (rg —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º file:line:col:match)
    vimgrep_arguments = {
      "rg",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case",
      -- –ò—Å–∫–ª—é—á–µ–Ω–∏—è.
      "--glob", "!node_modules/*",
    },

    prompt_prefix   = "üîç ",
    selection_caret = "‚û§ ",
    path_display    = { "shorten" },

    -- Preview –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ (–∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –≤–æ–∫—Ä—É–≥ match)
    buffer_previewer_maker = previewers.buffer_previewer_maker,

    file_sorter = sorters.get_fzy_sorter,

    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ Telescope
    mappings = {
      i = {
        -- TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ wrap
        ["<C-n>"] = function(prompt_bufnr)
          actions.move_selection_next(prompt_bufnr, { wrap = false })
        end,
        ["<C-p>"] = function(prompt_bufnr)
          actions.move_selection_previous(prompt_bufnr, { wrap = false })
        end,
        ["<Down>"] = function(prompt_bufnr)
          actions.move_selection_next(prompt_bufnr, { wrap = false })
        end,
        ["<Up>"] = function(prompt_bufnr)
          actions.move_selection_previous(prompt_bufnr, { wrap = false })
        end,

        -- –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        ["<Esc>"] = actions.close,
        -- –ü—Ä–∏ –≤—ã–±–æ—Ä–µ Enter ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é,
        -- —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É/—Å—Ç–æ–ª–±–µ—Ü (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        ["<CR>"]  = open_with_position,
		["<C-v>"] = function(prompt_bufnr)
		  -- –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ <C-r>+ –≤ prompt-–µ, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
		  local paste = vim.api.nvim_replace_termcodes("<C-r>+", true, false, true)
		  vim.api.nvim_feedkeys(paste, "i", false)
		end,
-- –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ["<C-j>"] = actions.move_selection_next,
        ["<C-k>"] = actions.move_selection_previous,
        -- –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–∞–∫–∂–µ –ª–∏—Å—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤:
        ["<C-Down>"] = actions.cycle_history_next,
        ["<C-Up>"] = actions.cycle_history_prev,
      },
      n = {
        ["<C-n>"] = function(prompt_bufnr)
          actions.move_selection_next(prompt_bufnr, { wrap = false })
        end,
        ["<C-p>"] = function(prompt_bufnr)
          actions.move_selection_previous(prompt_bufnr, { wrap = false })
        end,
        ["<Down>"] = function(prompt_bufnr)
          actions.move_selection_next(prompt_bufnr, { wrap = false })
        end,
        ["<Up>"] = function(prompt_bufnr)
          actions.move_selection_previous(prompt_bufnr, { wrap = false })
        end,

        ["<Esc>"] = actions.close,
        ["<CR>"]  = open_with_position,
      },
    },
  },

  pickers = {
    -- find_files: –∏—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º node_modules –∏ .git
    find_files = {
      find_command = {
        "rg",
        "--files",
        "--hidden",
        "--follow",
        "--glob", "!.git/*",
        "--glob", "!node_modules/*",
      },
      -- –ü—Ä–µ–≤—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (buffer_previewer_maker)
    },
    -- live_grep: –Ω–∞—Å–ª–µ–¥—É–µ—Ç vimgrep_arguments –∏–∑ defaults
    live_grep = {
      -- –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    },
  },

  extensions = {
    -- –ú–æ–∂–Ω–æ —Ç—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å fzf-native, media_files –∏ —Ç.–ø.
  },
}

-- –∑–∞–º–µ–Ω–∞ —Å telescpope
local function escape_for_vimgrep(str)
  -- —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ—à–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ; –∑–¥–µ—Å—å –±–∞–∑–æ–≤–æ: –∑–∞–º–µ–Ω–∏—Ç—å '/' –Ω–∞ '\/'
  return str:gsub("/", "\\/")
end

local function replace_on_existing_quickfix()
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ quickfix –Ω–µ –ø—É—Å—Ç
  local qfl = vim.fn.getqflist()
  if vim.tbl_isempty(qfl) then
    print("Quickfix list is empty; run live_grep + <C-q> first")
    return
  end
  -- –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏ –∑–∞–º–µ–Ω—É
  vim.ui.input({ prompt = "Search pattern (for replacement): " }, function(pattern)
    if not pattern or pattern == "" then
      print("Cancelled")
      return
    end
    local esc_pattern = escape_for_vimgrep(pattern)
    vim.ui.input({ prompt = "Replacement text: " }, function(replacement)
      if replacement == nil then
        print("Cancelled")
        return
      end
      local esc_replacement = replacement:gsub("/", "\\/")
      vim.cmd('copen')
      vim.ui.input({ prompt = "Run replace on quickfix matches with confirmation? (yes): " }, function(ans)
        if not ans or ans:lower()~="yes" then
          print("Aborted")
          return
        end
        vim.cmd('cfdo %s/'..esc_pattern..'/'..esc_replacement..'/gc | update')
        print("Done")
      end)
    end)
  end)
end

vim.keymap.set('n', '<leader>t', replace_on_existing_quickfix, { desc="Replace on existing quickfix" })
-- –∑–∞–º–µ–Ω–∞ —Å telescope end
